TESTCASE test00
make: 'test00' is up to date.
1,16d0
< Phase 1A TEMPORARY HACK: init() manually switching to PID 1.
< phase2_start_service_processes() called -- currently a NOP
< phase3_start_service_processes() called -- currently a NOP
< phase4_start_service_processes() called -- currently a NOP
< phase5_start_service_processes() called -- currently a NOP
< Phase 1A TEMPORARY HACK: init() manually switching to testcase_main() after using spork() to create it.
< testcase_main(): started
< EXPECTATION: Simple spork()/join() should complete.
< Phase 1A TEMPORARY HACK: Manually switching to the recently created XXp1()
< XXp1(): started
< XXp1(): arg = 'XXp1'
< testcase_main(): after spork of child 3
< testcase_main(): performing join
< testcase_main(): exit status for child 3 is 3
< Phase 1A TEMPORARY HACK: testcase_main() returned, simulation will now halt.
< finish(): The simulation is now terminating.

TESTCASE test01
make: 'test01' is up to date.
1,22d0
< Phase 1A TEMPORARY HACK: init() manually switching to PID 1.
< phase2_start_service_processes() called -- currently a NOP
< phase3_start_service_processes() called -- currently a NOP
< phase4_start_service_processes() called -- currently a NOP
< phase5_start_service_processes() called -- currently a NOP
< Phase 1A TEMPORARY HACK: init() manually switching to testcase_main() after using spork() to create it.
< testcase_main(): started
< EXPECTATION: XXp1 should run promptly, as it is high priority; XXp2 should run only *after* we have started the second join(), because it is low priority.
< Phase 1A TEMPORARY HACK: Manually switching to the first XXp1()
< XXp1(): started
< XXp1(): arg = 'XXp1'
< testcase_main(): after spork of child 3 -- you should not see this until XXp1 has completed.
< testcase_main(): after spork of child 4 -- you should see this before XXp2 runs.
< testcase_main(): performing first join
< testcase_main(): exit status for child 3 is 3
< testcase_main(): performing second join -- you should see this before XXp2 runs.
< Phase 1A TEMPORARY HACK: Manually switching to the second XXp1()
< XXp2(): started
< XXp2(): arg = 'XXp2'
< testcase_main(): exit status for child 4 is 5
< Phase 1A TEMPORARY HACK: testcase_main() returned, simulation will now halt.
< finish(): The simulation is now terminating.

TESTCASE test02
make: 'test02' is up to date.
1,30d0
< Phase 1A TEMPORARY HACK: init() manually switching to PID 1.
< phase2_start_service_processes() called -- currently a NOP
< phase3_start_service_processes() called -- currently a NOP
< phase4_start_service_processes() called -- currently a NOP
< phase5_start_service_processes() called -- currently a NOP
< Phase 1A TEMPORARY HACK: init() manually switching to testcase_main() after using spork() to create it.
< testcase_main(): started
< EXPECTATION: main creates XXp1; XXp1 creates a pair of XXp2 procs; join() each parent with all its children.  (children are always higher priority than parents, in this testcase)
< Phase 1A TEMPORARY HACK: Manually switching to XXp1()
< XXp1(): started
< XXp1(): arg = 'XXp1'
< XXp1(): executing spork of first child
< Phase 1A TEMPORARY HACK: Manually switching to the first XXp2()
< XXp2(): started
< XXp2(): arg = 'XXp2'
< XXp2(): This XXp2() process will now quit().
< XXp1(): spork of first child returned pid = 4 -- you should not see this until the first XXp2 process has completed.
< XXp1(): executing spork of second child -- this happens after the first XXp2 process has completed, but before we've done a join() on it.
< Phase 1A TEMPORARY HACK: Manually switching to the first XXp2()
< XXp2(): started
< XXp2(): arg = 'XXp2'
< XXp2(): This XXp2() process will now quit().
< XXp1(): spork of second child returned pid = 5 -- you should not see this until the second XXp2 process has completed.
< XXp1(): first join returned kidpid = 5, status = 5
< XXp1(): second join returned kidpid = 4, status = 5
< testcase_main(): after spork of child 3 -- you should not see this until XXp1, and both of the XXp2 processes, have completed.
< testcase_main(): performing join
< testcase_main(): exit status for child 3 is 3
< Phase 1A TEMPORARY HACK: testcase_main() returned, simulation will now halt.
< finish(): The simulation is now terminating.

TESTCASE test03
make: 'test03' is up to date.
1,919d0
< Phase 1A TEMPORARY HACK: init() manually switching to PID 1.
< phase2_start_service_processes() called -- currently a NOP
< phase3_start_service_processes() called -- currently a NOP
< phase4_start_service_processes() called -- currently a NOP
< phase5_start_service_processes() called -- currently a NOP
< Phase 1A TEMPORARY HACK: init() manually switching to testcase_main() after using spork() to create it.
< testcase_main(): started
< EXPECTATION: main() creates many XXp1 children, and join()s all of them; then repeats twice.  Process count is large enough to fill process table - meaning that students must free old process table entries.
< 
< *** Start of round 0 of the spork()/join() operations ***
< Phase 1A TEMPORARY HACK: Manually switching to XXp1()
< XXp1(): started, pid = 3
< XXp1(): arg = 'XXp1'
< XXp1(): this process will terminate immediately.
< testcase_main(): after spork of child 3 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these spork messages.
< Phase 1A TEMPORARY HACK: Manually switching to XXp1()
< XXp1(): started, pid = 4
< XXp1(): arg = 'XXp1'
< XXp1(): this process will terminate immediately.
< testcase_main(): after spork of child 4 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these spork messages.
< Phase 1A TEMPORARY HACK: Manually switching to XXp1()
< XXp1(): started, pid = 5
< XXp1(): arg = 'XXp1'
< XXp1(): this process will terminate immediately.
< testcase_main(): after spork of child 5 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these spork messages.
< Phase 1A TEMPORARY HACK: Manually switching to XXp1()
< XXp1(): started, pid = 6
< XXp1(): arg = 'XXp1'
< XXp1(): this process will terminate immediately.
< testcase_main(): after spork of child 6 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these spork messages.
< Phase 1A TEMPORARY HACK: Manually switching to XXp1()
< XXp1(): started, pid = 7
< XXp1(): arg = 'XXp1'
< XXp1(): this process will terminate immediately.
< testcase_main(): after spork of child 7 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these spork messages.
< Phase 1A TEMPORARY HACK: Manually switching to XXp1()
< XXp1(): started, pid = 8
< XXp1(): arg = 'XXp1'
< XXp1(): this process will terminate immediately.
< testcase_main(): after spork of child 8 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these spork messages.
< Phase 1A TEMPORARY HACK: Manually switching to XXp1()
< XXp1(): started, pid = 9
< XXp1(): arg = 'XXp1'
< XXp1(): this process will terminate immediately.
< testcase_main(): after spork of child 9 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these spork messages.
< Phase 1A TEMPORARY HACK: Manually switching to XXp1()
< XXp1(): started, pid = 10
< XXp1(): arg = 'XXp1'
< XXp1(): this process will terminate immediately.
< testcase_main(): after spork of child 10 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these spork messages.
< Phase 1A TEMPORARY HACK: Manually switching to XXp1()
< XXp1(): started, pid = 11
< XXp1(): arg = 'XXp1'
< XXp1(): this process will terminate immediately.
< testcase_main(): after spork of child 11 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these spork messages.
< Phase 1A TEMPORARY HACK: Manually switching to XXp1()
< XXp1(): started, pid = 12
< XXp1(): arg = 'XXp1'
< XXp1(): this process will terminate immediately.
< testcase_main(): after spork of child 12 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these spork messages.
< Phase 1A TEMPORARY HACK: Manually switching to XXp1()
< XXp1(): started, pid = 13
< XXp1(): arg = 'XXp1'
< XXp1(): this process will terminate immediately.
< testcase_main(): after spork of child 13 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these spork messages.
< Phase 1A TEMPORARY HACK: Manually switching to XXp1()
< XXp1(): started, pid = 14
< XXp1(): arg = 'XXp1'
< XXp1(): this process will terminate immediately.
< testcase_main(): after spork of child 14 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these spork messages.
< Phase 1A TEMPORARY HACK: Manually switching to XXp1()
< XXp1(): started, pid = 15
< XXp1(): arg = 'XXp1'
< XXp1(): this process will terminate immediately.
< testcase_main(): after spork of child 15 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these spork messages.
< Phase 1A TEMPORARY HACK: Manually switching to XXp1()
< XXp1(): started, pid = 16
< XXp1(): arg = 'XXp1'
< XXp1(): this process will terminate immediately.
< testcase_main(): after spork of child 16 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these spork messages.
< Phase 1A TEMPORARY HACK: Manually switching to XXp1()
< XXp1(): started, pid = 17
< XXp1(): arg = 'XXp1'
< XXp1(): this process will terminate immediately.
< testcase_main(): after spork of child 17 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these spork messages.
< Phase 1A TEMPORARY HACK: Manually switching to XXp1()
< XXp1(): started, pid = 18
< XXp1(): arg = 'XXp1'
< XXp1(): this process will terminate immediately.
< testcase_main(): after spork of child 18 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these spork messages.
< Phase 1A TEMPORARY HACK: Manually switching to XXp1()
< XXp1(): started, pid = 19
< XXp1(): arg = 'XXp1'
< XXp1(): this process will terminate immediately.
< testcase_main(): after spork of child 19 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these spork messages.
< Phase 1A TEMPORARY HACK: Manually switching to XXp1()
< XXp1(): started, pid = 20
< XXp1(): arg = 'XXp1'
< XXp1(): this process will terminate immediately.
< testcase_main(): after spork of child 20 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these spork messages.
< Phase 1A TEMPORARY HACK: Manually switching to XXp1()
< XXp1(): started, pid = 21
< XXp1(): arg = 'XXp1'
< XXp1(): this process will terminate immediately.
< testcase_main(): after spork of child 21 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these spork messages.
< Phase 1A TEMPORARY HACK: Manually switching to XXp1()
< XXp1(): started, pid = 22
< XXp1(): arg = 'XXp1'
< XXp1(): this process will terminate immediately.
< testcase_main(): after spork of child 22 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these spork messages.
< Phase 1A TEMPORARY HACK: Manually switching to XXp1()
< XXp1(): started, pid = 23
< XXp1(): arg = 'XXp1'
< XXp1(): this process will terminate immediately.
< testcase_main(): after spork of child 23 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these spork messages.
< Phase 1A TEMPORARY HACK: Manually switching to XXp1()
< XXp1(): started, pid = 24
< XXp1(): arg = 'XXp1'
< XXp1(): this process will terminate immediately.
< testcase_main(): after spork of child 24 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these spork messages.
< Phase 1A TEMPORARY HACK: Manually switching to XXp1()
< XXp1(): started, pid = 25
< XXp1(): arg = 'XXp1'
< XXp1(): this process will terminate immediately.
< testcase_main(): after spork of child 25 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these spork messages.
< Phase 1A TEMPORARY HACK: Manually switching to XXp1()
< XXp1(): started, pid = 26
< XXp1(): arg = 'XXp1'
< XXp1(): this process will terminate immediately.
< testcase_main(): after spork of child 26 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these spork messages.
< Phase 1A TEMPORARY HACK: Manually switching to XXp1()
< XXp1(): started, pid = 27
< XXp1(): arg = 'XXp1'
< XXp1(): this process will terminate immediately.
< testcase_main(): after spork of child 27 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these spork messages.
< Phase 1A TEMPORARY HACK: Manually switching to XXp1()
< XXp1(): started, pid = 28
< XXp1(): arg = 'XXp1'
< XXp1(): this process will terminate immediately.
< testcase_main(): after spork of child 28 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these spork messages.
< Phase 1A TEMPORARY HACK: Manually switching to XXp1()
< XXp1(): started, pid = 29
< XXp1(): arg = 'XXp1'
< XXp1(): this process will terminate immediately.
< testcase_main(): after spork of child 29 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these spork messages.
< Phase 1A TEMPORARY HACK: Manually switching to XXp1()
< XXp1(): started, pid = 30
< XXp1(): arg = 'XXp1'
< XXp1(): this process will terminate immediately.
< testcase_main(): after spork of child 30 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these spork messages.
< Phase 1A TEMPORARY HACK: Manually switching to XXp1()
< XXp1(): started, pid = 31
< XXp1(): arg = 'XXp1'
< XXp1(): this process will terminate immediately.
< testcase_main(): after spork of child 31 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these spork messages.
< Phase 1A TEMPORARY HACK: Manually switching to XXp1()
< XXp1(): started, pid = 32
< XXp1(): arg = 'XXp1'
< XXp1(): this process will terminate immediately.
< testcase_main(): after spork of child 32 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these spork messages.
< Phase 1A TEMPORARY HACK: Manually switching to XXp1()
< XXp1(): started, pid = 33
< XXp1(): arg = 'XXp1'
< XXp1(): this process will terminate immediately.
< testcase_main(): after spork of child 33 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these spork messages.
< Phase 1A TEMPORARY HACK: Manually switching to XXp1()
< XXp1(): started, pid = 34
< XXp1(): arg = 'XXp1'
< XXp1(): this process will terminate immediately.
< testcase_main(): after spork of child 34 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these spork messages.
< Phase 1A TEMPORARY HACK: Manually switching to XXp1()
< XXp1(): started, pid = 35
< XXp1(): arg = 'XXp1'
< XXp1(): this process will terminate immediately.
< testcase_main(): after spork of child 35 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these spork messages.
< Phase 1A TEMPORARY HACK: Manually switching to XXp1()
< XXp1(): started, pid = 36
< XXp1(): arg = 'XXp1'
< XXp1(): this process will terminate immediately.
< testcase_main(): after spork of child 36 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these spork messages.
< Phase 1A TEMPORARY HACK: Manually switching to XXp1()
< XXp1(): started, pid = 37
< XXp1(): arg = 'XXp1'
< XXp1(): this process will terminate immediately.
< testcase_main(): after spork of child 37 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these spork messages.
< Phase 1A TEMPORARY HACK: Manually switching to XXp1()
< XXp1(): started, pid = 38
< XXp1(): arg = 'XXp1'
< XXp1(): this process will terminate immediately.
< testcase_main(): after spork of child 38 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these spork messages.
< Phase 1A TEMPORARY HACK: Manually switching to XXp1()
< XXp1(): started, pid = 39
< XXp1(): arg = 'XXp1'
< XXp1(): this process will terminate immediately.
< testcase_main(): after spork of child 39 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these spork messages.
< Phase 1A TEMPORARY HACK: Manually switching to XXp1()
< XXp1(): started, pid = 40
< XXp1(): arg = 'XXp1'
< XXp1(): this process will terminate immediately.
< testcase_main(): after spork of child 40 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these spork messages.
< Phase 1A TEMPORARY HACK: Manually switching to XXp1()
< XXp1(): started, pid = 41
< XXp1(): arg = 'XXp1'
< XXp1(): this process will terminate immediately.
< testcase_main(): after spork of child 41 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these spork messages.
< Phase 1A TEMPORARY HACK: Manually switching to XXp1()
< XXp1(): started, pid = 42
< XXp1(): arg = 'XXp1'
< XXp1(): this process will terminate immediately.
< testcase_main(): after spork of child 42 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these spork messages.
< Phase 1A TEMPORARY HACK: Manually switching to XXp1()
< XXp1(): started, pid = 43
< XXp1(): arg = 'XXp1'
< XXp1(): this process will terminate immediately.
< testcase_main(): after spork of child 43 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these spork messages.
< Phase 1A TEMPORARY HACK: Manually switching to XXp1()
< XXp1(): started, pid = 44
< XXp1(): arg = 'XXp1'
< XXp1(): this process will terminate immediately.
< testcase_main(): after spork of child 44 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these spork messages.
< 
< **************** Calling dumpProcesses() *******************
<  PID  PPID  NAME              PRIORITY  STATE
<    1     0  init              6         Runnable
<    2     1  testcase_main     3         Running
<    3     2  XXp1              2         Terminated(3)
<    4     2  XXp1              2         Terminated(4)
<    5     2  XXp1              2         Terminated(5)
<    6     2  XXp1              2         Terminated(6)
<    7     2  XXp1              2         Terminated(7)
<    8     2  XXp1              2         Terminated(8)
<    9     2  XXp1              2         Terminated(9)
<   10     2  XXp1              2         Terminated(10)
<   11     2  XXp1              2         Terminated(11)
<   12     2  XXp1              2         Terminated(12)
<   13     2  XXp1              2         Terminated(13)
<   14     2  XXp1              2         Terminated(14)
<   15     2  XXp1              2         Terminated(15)
<   16     2  XXp1              2         Terminated(16)
<   17     2  XXp1              2         Terminated(17)
<   18     2  XXp1              2         Terminated(18)
<   19     2  XXp1              2         Terminated(19)
<   20     2  XXp1              2         Terminated(20)
<   21     2  XXp1              2         Terminated(21)
<   22     2  XXp1              2         Terminated(22)
<   23     2  XXp1              2         Terminated(23)
<   24     2  XXp1              2         Terminated(24)
<   25     2  XXp1              2         Terminated(25)
<   26     2  XXp1              2         Terminated(26)
<   27     2  XXp1              2         Terminated(27)
<   28     2  XXp1              2         Terminated(28)
<   29     2  XXp1              2         Terminated(29)
<   30     2  XXp1              2         Terminated(30)
<   31     2  XXp1              2         Terminated(31)
<   32     2  XXp1              2         Terminated(32)
<   33     2  XXp1              2         Terminated(33)
<   34     2  XXp1              2         Terminated(34)
<   35     2  XXp1              2         Terminated(35)
<   36     2  XXp1              2         Terminated(36)
<   37     2  XXp1              2         Terminated(37)
<   38     2  XXp1              2         Terminated(38)
<   39     2  XXp1              2         Terminated(39)
<   40     2  XXp1              2         Terminated(40)
<   41     2  XXp1              2         Terminated(41)
<   42     2  XXp1              2         Terminated(42)
<   43     2  XXp1              2         Terminated(43)
<   44     2  XXp1              2         Terminated(44)
< **************** end dumpProcesses() *******************
< 
< testcase_main(): after join of child 44, status = 44
< testcase_main(): after join of child 43, status = 43
< testcase_main(): after join of child 42, status = 42
< testcase_main(): after join of child 41, status = 41
< testcase_main(): after join of child 40, status = 40
< testcase_main(): after join of child 39, status = 39
< testcase_main(): after join of child 38, status = 38
< testcase_main(): after join of child 37, status = 37
< testcase_main(): after join of child 36, status = 36
< testcase_main(): after join of child 35, status = 35
< testcase_main(): after join of child 34, status = 34
< testcase_main(): after join of child 33, status = 33
< testcase_main(): after join of child 32, status = 32
< testcase_main(): after join of child 31, status = 31
< testcase_main(): after join of child 30, status = 30
< testcase_main(): after join of child 29, status = 29
< testcase_main(): after join of child 28, status = 28
< testcase_main(): after join of child 27, status = 27
< testcase_main(): after join of child 26, status = 26
< testcase_main(): after join of child 25, status = 25
< testcase_main(): after join of child 24, status = 24
< testcase_main(): after join of child 23, status = 23
< testcase_main(): after join of child 22, status = 22
< testcase_main(): after join of child 21, status = 21
< testcase_main(): after join of child 20, status = 20
< testcase_main(): after join of child 19, status = 19
< testcase_main(): after join of child 18, status = 18
< testcase_main(): after join of child 17, status = 17
< testcase_main(): after join of child 16, status = 16
< testcase_main(): after join of child 15, status = 15
< testcase_main(): after join of child 14, status = 14
< testcase_main(): after join of child 13, status = 13
< testcase_main(): after join of child 12, status = 12
< testcase_main(): after join of child 11, status = 11
< testcase_main(): after join of child 10, status = 10
< testcase_main(): after join of child 9, status = 9
< testcase_main(): after join of child 8, status = 8
< testcase_main(): after join of child 7, status = 7
< testcase_main(): after join of child 6, status = 6
< testcase_main(): after join of child 5, status = 5
< testcase_main(): after join of child 4, status = 4
< testcase_main(): after join of child 3, status = 3
< 
< *** Start of round 1 of the spork()/join() operations ***
< Phase 1A TEMPORARY HACK: Manually switching to XXp1()
< XXp1(): started, pid = 45
< XXp1(): arg = 'XXp1'
< XXp1(): this process will terminate immediately.
< testcase_main(): after spork of child 45 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these spork messages.
< Phase 1A TEMPORARY HACK: Manually switching to XXp1()
< XXp1(): started, pid = 46
< XXp1(): arg = 'XXp1'
< XXp1(): this process will terminate immediately.
< testcase_main(): after spork of child 46 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these spork messages.
< Phase 1A TEMPORARY HACK: Manually switching to XXp1()
< XXp1(): started, pid = 47
< XXp1(): arg = 'XXp1'
< XXp1(): this process will terminate immediately.
< testcase_main(): after spork of child 47 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these spork messages.
< Phase 1A TEMPORARY HACK: Manually switching to XXp1()
< XXp1(): started, pid = 48
< XXp1(): arg = 'XXp1'
< XXp1(): this process will terminate immediately.
< testcase_main(): after spork of child 48 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these spork messages.
< Phase 1A TEMPORARY HACK: Manually switching to XXp1()
< XXp1(): started, pid = 49
< XXp1(): arg = 'XXp1'
< XXp1(): this process will terminate immediately.
< testcase_main(): after spork of child 49 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these spork messages.
< Phase 1A TEMPORARY HACK: Manually switching to XXp1()
< XXp1(): started, pid = 50
< XXp1(): arg = 'XXp1'
< XXp1(): this process will terminate immediately.
< testcase_main(): after spork of child 50 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these spork messages.
< Phase 1A TEMPORARY HACK: Manually switching to XXp1()
< XXp1(): started, pid = 53
< XXp1(): arg = 'XXp1'
< XXp1(): this process will terminate immediately.
< testcase_main(): after spork of child 53 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these spork messages.
< Phase 1A TEMPORARY HACK: Manually switching to XXp1()
< XXp1(): started, pid = 54
< XXp1(): arg = 'XXp1'
< XXp1(): this process will terminate immediately.
< testcase_main(): after spork of child 54 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these spork messages.
< Phase 1A TEMPORARY HACK: Manually switching to XXp1()
< XXp1(): started, pid = 55
< XXp1(): arg = 'XXp1'
< XXp1(): this process will terminate immediately.
< testcase_main(): after spork of child 55 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these spork messages.
< Phase 1A TEMPORARY HACK: Manually switching to XXp1()
< XXp1(): started, pid = 56
< XXp1(): arg = 'XXp1'
< XXp1(): this process will terminate immediately.
< testcase_main(): after spork of child 56 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these spork messages.
< Phase 1A TEMPORARY HACK: Manually switching to XXp1()
< XXp1(): started, pid = 57
< XXp1(): arg = 'XXp1'
< XXp1(): this process will terminate immediately.
< testcase_main(): after spork of child 57 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these spork messages.
< Phase 1A TEMPORARY HACK: Manually switching to XXp1()
< XXp1(): started, pid = 58
< XXp1(): arg = 'XXp1'
< XXp1(): this process will terminate immediately.
< testcase_main(): after spork of child 58 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these spork messages.
< Phase 1A TEMPORARY HACK: Manually switching to XXp1()
< XXp1(): started, pid = 59
< XXp1(): arg = 'XXp1'
< XXp1(): this process will terminate immediately.
< testcase_main(): after spork of child 59 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these spork messages.
< Phase 1A TEMPORARY HACK: Manually switching to XXp1()
< XXp1(): started, pid = 60
< XXp1(): arg = 'XXp1'
< XXp1(): this process will terminate immediately.
< testcase_main(): after spork of child 60 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these spork messages.
< Phase 1A TEMPORARY HACK: Manually switching to XXp1()
< XXp1(): started, pid = 61
< XXp1(): arg = 'XXp1'
< XXp1(): this process will terminate immediately.
< testcase_main(): after spork of child 61 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these spork messages.
< Phase 1A TEMPORARY HACK: Manually switching to XXp1()
< XXp1(): started, pid = 62
< XXp1(): arg = 'XXp1'
< XXp1(): this process will terminate immediately.
< testcase_main(): after spork of child 62 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these spork messages.
< Phase 1A TEMPORARY HACK: Manually switching to XXp1()
< XXp1(): started, pid = 63
< XXp1(): arg = 'XXp1'
< XXp1(): this process will terminate immediately.
< testcase_main(): after spork of child 63 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these spork messages.
< Phase 1A TEMPORARY HACK: Manually switching to XXp1()
< XXp1(): started, pid = 64
< XXp1(): arg = 'XXp1'
< XXp1(): this process will terminate immediately.
< testcase_main(): after spork of child 64 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these spork messages.
< Phase 1A TEMPORARY HACK: Manually switching to XXp1()
< XXp1(): started, pid = 65
< XXp1(): arg = 'XXp1'
< XXp1(): this process will terminate immediately.
< testcase_main(): after spork of child 65 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these spork messages.
< Phase 1A TEMPORARY HACK: Manually switching to XXp1()
< XXp1(): started, pid = 66
< XXp1(): arg = 'XXp1'
< XXp1(): this process will terminate immediately.
< testcase_main(): after spork of child 66 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these spork messages.
< Phase 1A TEMPORARY HACK: Manually switching to XXp1()
< XXp1(): started, pid = 67
< XXp1(): arg = 'XXp1'
< XXp1(): this process will terminate immediately.
< testcase_main(): after spork of child 67 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these spork messages.
< Phase 1A TEMPORARY HACK: Manually switching to XXp1()
< XXp1(): started, pid = 68
< XXp1(): arg = 'XXp1'
< XXp1(): this process will terminate immediately.
< testcase_main(): after spork of child 68 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these spork messages.
< Phase 1A TEMPORARY HACK: Manually switching to XXp1()
< XXp1(): started, pid = 69
< XXp1(): arg = 'XXp1'
< XXp1(): this process will terminate immediately.
< testcase_main(): after spork of child 69 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these spork messages.
< Phase 1A TEMPORARY HACK: Manually switching to XXp1()
< XXp1(): started, pid = 70
< XXp1(): arg = 'XXp1'
< XXp1(): this process will terminate immediately.
< testcase_main(): after spork of child 70 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these spork messages.
< Phase 1A TEMPORARY HACK: Manually switching to XXp1()
< XXp1(): started, pid = 71
< XXp1(): arg = 'XXp1'
< XXp1(): this process will terminate immediately.
< testcase_main(): after spork of child 71 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these spork messages.
< Phase 1A TEMPORARY HACK: Manually switching to XXp1()
< XXp1(): started, pid = 72
< XXp1(): arg = 'XXp1'
< XXp1(): this process will terminate immediately.
< testcase_main(): after spork of child 72 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these spork messages.
< Phase 1A TEMPORARY HACK: Manually switching to XXp1()
< XXp1(): started, pid = 73
< XXp1(): arg = 'XXp1'
< XXp1(): this process will terminate immediately.
< testcase_main(): after spork of child 73 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these spork messages.
< Phase 1A TEMPORARY HACK: Manually switching to XXp1()
< XXp1(): started, pid = 74
< XXp1(): arg = 'XXp1'
< XXp1(): this process will terminate immediately.
< testcase_main(): after spork of child 74 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these spork messages.
< Phase 1A TEMPORARY HACK: Manually switching to XXp1()
< XXp1(): started, pid = 75
< XXp1(): arg = 'XXp1'
< XXp1(): this process will terminate immediately.
< testcase_main(): after spork of child 75 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these spork messages.
< Phase 1A TEMPORARY HACK: Manually switching to XXp1()
< XXp1(): started, pid = 76
< XXp1(): arg = 'XXp1'
< XXp1(): this process will terminate immediately.
< testcase_main(): after spork of child 76 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these spork messages.
< Phase 1A TEMPORARY HACK: Manually switching to XXp1()
< XXp1(): started, pid = 77
< XXp1(): arg = 'XXp1'
< XXp1(): this process will terminate immediately.
< testcase_main(): after spork of child 77 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these spork messages.
< Phase 1A TEMPORARY HACK: Manually switching to XXp1()
< XXp1(): started, pid = 78
< XXp1(): arg = 'XXp1'
< XXp1(): this process will terminate immediately.
< testcase_main(): after spork of child 78 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these spork messages.
< Phase 1A TEMPORARY HACK: Manually switching to XXp1()
< XXp1(): started, pid = 79
< XXp1(): arg = 'XXp1'
< XXp1(): this process will terminate immediately.
< testcase_main(): after spork of child 79 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these spork messages.
< Phase 1A TEMPORARY HACK: Manually switching to XXp1()
< XXp1(): started, pid = 80
< XXp1(): arg = 'XXp1'
< XXp1(): this process will terminate immediately.
< testcase_main(): after spork of child 80 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these spork messages.
< Phase 1A TEMPORARY HACK: Manually switching to XXp1()
< XXp1(): started, pid = 81
< XXp1(): arg = 'XXp1'
< XXp1(): this process will terminate immediately.
< testcase_main(): after spork of child 81 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these spork messages.
< Phase 1A TEMPORARY HACK: Manually switching to XXp1()
< XXp1(): started, pid = 82
< XXp1(): arg = 'XXp1'
< XXp1(): this process will terminate immediately.
< testcase_main(): after spork of child 82 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these spork messages.
< Phase 1A TEMPORARY HACK: Manually switching to XXp1()
< XXp1(): started, pid = 83
< XXp1(): arg = 'XXp1'
< XXp1(): this process will terminate immediately.
< testcase_main(): after spork of child 83 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these spork messages.
< Phase 1A TEMPORARY HACK: Manually switching to XXp1()
< XXp1(): started, pid = 84
< XXp1(): arg = 'XXp1'
< XXp1(): this process will terminate immediately.
< testcase_main(): after spork of child 84 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these spork messages.
< Phase 1A TEMPORARY HACK: Manually switching to XXp1()
< XXp1(): started, pid = 85
< XXp1(): arg = 'XXp1'
< XXp1(): this process will terminate immediately.
< testcase_main(): after spork of child 85 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these spork messages.
< Phase 1A TEMPORARY HACK: Manually switching to XXp1()
< XXp1(): started, pid = 86
< XXp1(): arg = 'XXp1'
< XXp1(): this process will terminate immediately.
< testcase_main(): after spork of child 86 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these spork messages.
< Phase 1A TEMPORARY HACK: Manually switching to XXp1()
< XXp1(): started, pid = 87
< XXp1(): arg = 'XXp1'
< XXp1(): this process will terminate immediately.
< testcase_main(): after spork of child 87 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these spork messages.
< Phase 1A TEMPORARY HACK: Manually switching to XXp1()
< XXp1(): started, pid = 88
< XXp1(): arg = 'XXp1'
< XXp1(): this process will terminate immediately.
< testcase_main(): after spork of child 88 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these spork messages.
< 
< **************** Calling dumpProcesses() *******************
<  PID  PPID  NAME              PRIORITY  STATE
<   50     2  XXp1              2         Terminated(50)
<    1     0  init              6         Runnable
<    2     1  testcase_main     3         Running
<   53     2  XXp1              2         Terminated(53)
<   54     2  XXp1              2         Terminated(54)
<   55     2  XXp1              2         Terminated(55)
<   56     2  XXp1              2         Terminated(56)
<   57     2  XXp1              2         Terminated(57)
<   58     2  XXp1              2         Terminated(58)
<   59     2  XXp1              2         Terminated(59)
<   60     2  XXp1              2         Terminated(60)
<   61     2  XXp1              2         Terminated(61)
<   62     2  XXp1              2         Terminated(62)
<   63     2  XXp1              2         Terminated(63)
<   64     2  XXp1              2         Terminated(64)
<   65     2  XXp1              2         Terminated(65)
<   66     2  XXp1              2         Terminated(66)
<   67     2  XXp1              2         Terminated(67)
<   68     2  XXp1              2         Terminated(68)
<   69     2  XXp1              2         Terminated(69)
<   70     2  XXp1              2         Terminated(70)
<   71     2  XXp1              2         Terminated(71)
<   72     2  XXp1              2         Terminated(72)
<   73     2  XXp1              2         Terminated(73)
<   74     2  XXp1              2         Terminated(74)
<   75     2  XXp1              2         Terminated(75)
<   76     2  XXp1              2         Terminated(76)
<   77     2  XXp1              2         Terminated(77)
<   78     2  XXp1              2         Terminated(78)
<   79     2  XXp1              2         Terminated(79)
<   80     2  XXp1              2         Terminated(80)
<   81     2  XXp1              2         Terminated(81)
<   82     2  XXp1              2         Terminated(82)
<   83     2  XXp1              2         Terminated(83)
<   84     2  XXp1              2         Terminated(84)
<   85     2  XXp1              2         Terminated(85)
<   86     2  XXp1              2         Terminated(86)
<   87     2  XXp1              2         Terminated(87)
<   88     2  XXp1              2         Terminated(88)
<   45     2  XXp1              2         Terminated(45)
<   46     2  XXp1              2         Terminated(46)
<   47     2  XXp1              2         Terminated(47)
<   48     2  XXp1              2         Terminated(48)
<   49     2  XXp1              2         Terminated(49)
< **************** end dumpProcesses() *******************
< 
< testcase_main(): after join of child 88, status = 88
< testcase_main(): after join of child 87, status = 87
< testcase_main(): after join of child 86, status = 86
< testcase_main(): after join of child 85, status = 85
< testcase_main(): after join of child 84, status = 84
< testcase_main(): after join of child 83, status = 83
< testcase_main(): after join of child 82, status = 82
< testcase_main(): after join of child 81, status = 81
< testcase_main(): after join of child 80, status = 80
< testcase_main(): after join of child 79, status = 79
< testcase_main(): after join of child 78, status = 78
< testcase_main(): after join of child 77, status = 77
< testcase_main(): after join of child 76, status = 76
< testcase_main(): after join of child 75, status = 75
< testcase_main(): after join of child 74, status = 74
< testcase_main(): after join of child 73, status = 73
< testcase_main(): after join of child 72, status = 72
< testcase_main(): after join of child 71, status = 71
< testcase_main(): after join of child 70, status = 70
< testcase_main(): after join of child 69, status = 69
< testcase_main(): after join of child 68, status = 68
< testcase_main(): after join of child 67, status = 67
< testcase_main(): after join of child 66, status = 66
< testcase_main(): after join of child 65, status = 65
< testcase_main(): after join of child 64, status = 64
< testcase_main(): after join of child 63, status = 63
< testcase_main(): after join of child 62, status = 62
< testcase_main(): after join of child 61, status = 61
< testcase_main(): after join of child 60, status = 60
< testcase_main(): after join of child 59, status = 59
< testcase_main(): after join of child 58, status = 58
< testcase_main(): after join of child 57, status = 57
< testcase_main(): after join of child 56, status = 56
< testcase_main(): after join of child 55, status = 55
< testcase_main(): after join of child 54, status = 54
< testcase_main(): after join of child 53, status = 53
< testcase_main(): after join of child 50, status = 50
< testcase_main(): after join of child 49, status = 49
< testcase_main(): after join of child 48, status = 48
< testcase_main(): after join of child 47, status = 47
< testcase_main(): after join of child 46, status = 46
< testcase_main(): after join of child 45, status = 45
< 
< *** Start of round 2 of the spork()/join() operations ***
< Phase 1A TEMPORARY HACK: Manually switching to XXp1()
< XXp1(): started, pid = 89
< XXp1(): arg = 'XXp1'
< XXp1(): this process will terminate immediately.
< testcase_main(): after spork of child 89 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these spork messages.
< Phase 1A TEMPORARY HACK: Manually switching to XXp1()
< XXp1(): started, pid = 90
< XXp1(): arg = 'XXp1'
< XXp1(): this process will terminate immediately.
< testcase_main(): after spork of child 90 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these spork messages.
< Phase 1A TEMPORARY HACK: Manually switching to XXp1()
< XXp1(): started, pid = 91
< XXp1(): arg = 'XXp1'
< XXp1(): this process will terminate immediately.
< testcase_main(): after spork of child 91 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these spork messages.
< Phase 1A TEMPORARY HACK: Manually switching to XXp1()
< XXp1(): started, pid = 92
< XXp1(): arg = 'XXp1'
< XXp1(): this process will terminate immediately.
< testcase_main(): after spork of child 92 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these spork messages.
< Phase 1A TEMPORARY HACK: Manually switching to XXp1()
< XXp1(): started, pid = 93
< XXp1(): arg = 'XXp1'
< XXp1(): this process will terminate immediately.
< testcase_main(): after spork of child 93 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these spork messages.
< Phase 1A TEMPORARY HACK: Manually switching to XXp1()
< XXp1(): started, pid = 94
< XXp1(): arg = 'XXp1'
< XXp1(): this process will terminate immediately.
< testcase_main(): after spork of child 94 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these spork messages.
< Phase 1A TEMPORARY HACK: Manually switching to XXp1()
< XXp1(): started, pid = 95
< XXp1(): arg = 'XXp1'
< XXp1(): this process will terminate immediately.
< testcase_main(): after spork of child 95 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these spork messages.
< Phase 1A TEMPORARY HACK: Manually switching to XXp1()
< XXp1(): started, pid = 96
< XXp1(): arg = 'XXp1'
< XXp1(): this process will terminate immediately.
< testcase_main(): after spork of child 96 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these spork messages.
< Phase 1A TEMPORARY HACK: Manually switching to XXp1()
< XXp1(): started, pid = 97
< XXp1(): arg = 'XXp1'
< XXp1(): this process will terminate immediately.
< testcase_main(): after spork of child 97 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these spork messages.
< Phase 1A TEMPORARY HACK: Manually switching to XXp1()
< XXp1(): started, pid = 98
< XXp1(): arg = 'XXp1'
< XXp1(): this process will terminate immediately.
< testcase_main(): after spork of child 98 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these spork messages.
< Phase 1A TEMPORARY HACK: Manually switching to XXp1()
< XXp1(): started, pid = 99
< XXp1(): arg = 'XXp1'
< XXp1(): this process will terminate immediately.
< testcase_main(): after spork of child 99 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these spork messages.
< Phase 1A TEMPORARY HACK: Manually switching to XXp1()
< XXp1(): started, pid = 100
< XXp1(): arg = 'XXp1'
< XXp1(): this process will terminate immediately.
< testcase_main(): after spork of child 100 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these spork messages.
< Phase 1A TEMPORARY HACK: Manually switching to XXp1()
< XXp1(): started, pid = 103
< XXp1(): arg = 'XXp1'
< XXp1(): this process will terminate immediately.
< testcase_main(): after spork of child 103 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these spork messages.
< Phase 1A TEMPORARY HACK: Manually switching to XXp1()
< XXp1(): started, pid = 104
< XXp1(): arg = 'XXp1'
< XXp1(): this process will terminate immediately.
< testcase_main(): after spork of child 104 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these spork messages.
< Phase 1A TEMPORARY HACK: Manually switching to XXp1()
< XXp1(): started, pid = 105
< XXp1(): arg = 'XXp1'
< XXp1(): this process will terminate immediately.
< testcase_main(): after spork of child 105 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these spork messages.
< Phase 1A TEMPORARY HACK: Manually switching to XXp1()
< XXp1(): started, pid = 106
< XXp1(): arg = 'XXp1'
< XXp1(): this process will terminate immediately.
< testcase_main(): after spork of child 106 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these spork messages.
< Phase 1A TEMPORARY HACK: Manually switching to XXp1()
< XXp1(): started, pid = 107
< XXp1(): arg = 'XXp1'
< XXp1(): this process will terminate immediately.
< testcase_main(): after spork of child 107 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these spork messages.
< Phase 1A TEMPORARY HACK: Manually switching to XXp1()
< XXp1(): started, pid = 108
< XXp1(): arg = 'XXp1'
< XXp1(): this process will terminate immediately.
< testcase_main(): after spork of child 108 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these spork messages.
< Phase 1A TEMPORARY HACK: Manually switching to XXp1()
< XXp1(): started, pid = 109
< XXp1(): arg = 'XXp1'
< XXp1(): this process will terminate immediately.
< testcase_main(): after spork of child 109 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these spork messages.
< Phase 1A TEMPORARY HACK: Manually switching to XXp1()
< XXp1(): started, pid = 110
< XXp1(): arg = 'XXp1'
< XXp1(): this process will terminate immediately.
< testcase_main(): after spork of child 110 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these spork messages.
< Phase 1A TEMPORARY HACK: Manually switching to XXp1()
< XXp1(): started, pid = 111
< XXp1(): arg = 'XXp1'
< XXp1(): this process will terminate immediately.
< testcase_main(): after spork of child 111 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these spork messages.
< Phase 1A TEMPORARY HACK: Manually switching to XXp1()
< XXp1(): started, pid = 112
< XXp1(): arg = 'XXp1'
< XXp1(): this process will terminate immediately.
< testcase_main(): after spork of child 112 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these spork messages.
< Phase 1A TEMPORARY HACK: Manually switching to XXp1()
< XXp1(): started, pid = 113
< XXp1(): arg = 'XXp1'
< XXp1(): this process will terminate immediately.
< testcase_main(): after spork of child 113 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these spork messages.
< Phase 1A TEMPORARY HACK: Manually switching to XXp1()
< XXp1(): started, pid = 114
< XXp1(): arg = 'XXp1'
< XXp1(): this process will terminate immediately.
< testcase_main(): after spork of child 114 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these spork messages.
< Phase 1A TEMPORARY HACK: Manually switching to XXp1()
< XXp1(): started, pid = 115
< XXp1(): arg = 'XXp1'
< XXp1(): this process will terminate immediately.
< testcase_main(): after spork of child 115 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these spork messages.
< Phase 1A TEMPORARY HACK: Manually switching to XXp1()
< XXp1(): started, pid = 116
< XXp1(): arg = 'XXp1'
< XXp1(): this process will terminate immediately.
< testcase_main(): after spork of child 116 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these spork messages.
< Phase 1A TEMPORARY HACK: Manually switching to XXp1()
< XXp1(): started, pid = 117
< XXp1(): arg = 'XXp1'
< XXp1(): this process will terminate immediately.
< testcase_main(): after spork of child 117 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these spork messages.
< Phase 1A TEMPORARY HACK: Manually switching to XXp1()
< XXp1(): started, pid = 118
< XXp1(): arg = 'XXp1'
< XXp1(): this process will terminate immediately.
< testcase_main(): after spork of child 118 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these spork messages.
< Phase 1A TEMPORARY HACK: Manually switching to XXp1()
< XXp1(): started, pid = 119
< XXp1(): arg = 'XXp1'
< XXp1(): this process will terminate immediately.
< testcase_main(): after spork of child 119 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these spork messages.
< Phase 1A TEMPORARY HACK: Manually switching to XXp1()
< XXp1(): started, pid = 120
< XXp1(): arg = 'XXp1'
< XXp1(): this process will terminate immediately.
< testcase_main(): after spork of child 120 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these spork messages.
< Phase 1A TEMPORARY HACK: Manually switching to XXp1()
< XXp1(): started, pid = 121
< XXp1(): arg = 'XXp1'
< XXp1(): this process will terminate immediately.
< testcase_main(): after spork of child 121 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these spork messages.
< Phase 1A TEMPORARY HACK: Manually switching to XXp1()
< XXp1(): started, pid = 122
< XXp1(): arg = 'XXp1'
< XXp1(): this process will terminate immediately.
< testcase_main(): after spork of child 122 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these spork messages.
< Phase 1A TEMPORARY HACK: Manually switching to XXp1()
< XXp1(): started, pid = 123
< XXp1(): arg = 'XXp1'
< XXp1(): this process will terminate immediately.
< testcase_main(): after spork of child 123 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these spork messages.
< Phase 1A TEMPORARY HACK: Manually switching to XXp1()
< XXp1(): started, pid = 124
< XXp1(): arg = 'XXp1'
< XXp1(): this process will terminate immediately.
< testcase_main(): after spork of child 124 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these spork messages.
< Phase 1A TEMPORARY HACK: Manually switching to XXp1()
< XXp1(): started, pid = 125
< XXp1(): arg = 'XXp1'
< XXp1(): this process will terminate immediately.
< testcase_main(): after spork of child 125 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these spork messages.
< Phase 1A TEMPORARY HACK: Manually switching to XXp1()
< XXp1(): started, pid = 126
< XXp1(): arg = 'XXp1'
< XXp1(): this process will terminate immediately.
< testcase_main(): after spork of child 126 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these spork messages.
< Phase 1A TEMPORARY HACK: Manually switching to XXp1()
< XXp1(): started, pid = 127
< XXp1(): arg = 'XXp1'
< XXp1(): this process will terminate immediately.
< testcase_main(): after spork of child 127 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these spork messages.
< Phase 1A TEMPORARY HACK: Manually switching to XXp1()
< XXp1(): started, pid = 128
< XXp1(): arg = 'XXp1'
< XXp1(): this process will terminate immediately.
< testcase_main(): after spork of child 128 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these spork messages.
< Phase 1A TEMPORARY HACK: Manually switching to XXp1()
< XXp1(): started, pid = 129
< XXp1(): arg = 'XXp1'
< XXp1(): this process will terminate immediately.
< testcase_main(): after spork of child 129 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these spork messages.
< Phase 1A TEMPORARY HACK: Manually switching to XXp1()
< XXp1(): started, pid = 130
< XXp1(): arg = 'XXp1'
< XXp1(): this process will terminate immediately.
< testcase_main(): after spork of child 130 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these spork messages.
< Phase 1A TEMPORARY HACK: Manually switching to XXp1()
< XXp1(): started, pid = 131
< XXp1(): arg = 'XXp1'
< XXp1(): this process will terminate immediately.
< testcase_main(): after spork of child 131 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these spork messages.
< Phase 1A TEMPORARY HACK: Manually switching to XXp1()
< XXp1(): started, pid = 132
< XXp1(): arg = 'XXp1'
< XXp1(): this process will terminate immediately.
< testcase_main(): after spork of child 132 -- you will see this after the just-created child runs, and completes.  So expect an alternation of XXp1() output, followed by these spork messages.
< 
< **************** Calling dumpProcesses() *******************
<  PID  PPID  NAME              PRIORITY  STATE
<  100     2  XXp1              2         Terminated(100)
<    1     0  init              6         Runnable
<    2     1  testcase_main     3         Running
<  103     2  XXp1              2         Terminated(103)
<  104     2  XXp1              2         Terminated(104)
<  105     2  XXp1              2         Terminated(105)
<  106     2  XXp1              2         Terminated(106)
<  107     2  XXp1              2         Terminated(107)
<  108     2  XXp1              2         Terminated(108)
<  109     2  XXp1              2         Terminated(109)
<  110     2  XXp1              2         Terminated(110)
<  111     2  XXp1              2         Terminated(111)
<  112     2  XXp1              2         Terminated(112)
<  113     2  XXp1              2         Terminated(113)
<  114     2  XXp1              2         Terminated(114)
<  115     2  XXp1              2         Terminated(115)
<  116     2  XXp1              2         Terminated(116)
<  117     2  XXp1              2         Terminated(117)
<  118     2  XXp1              2         Terminated(118)
<  119     2  XXp1              2         Terminated(119)
<  120     2  XXp1              2         Terminated(120)
<  121     2  XXp1              2         Terminated(121)
<  122     2  XXp1              2         Terminated(122)
<  123     2  XXp1              2         Terminated(123)
<  124     2  XXp1              2         Terminated(124)
<  125     2  XXp1              2         Terminated(125)
<  126     2  XXp1              2         Terminated(126)
<  127     2  XXp1              2         Terminated(127)
<  128     2  XXp1              2         Terminated(128)
<  129     2  XXp1              2         Terminated(129)
<  130     2  XXp1              2         Terminated(130)
<  131     2  XXp1              2         Terminated(131)
<  132     2  XXp1              2         Terminated(132)
<   89     2  XXp1              2         Terminated(89)
<   90     2  XXp1              2         Terminated(90)
<   91     2  XXp1              2         Terminated(91)
<   92     2  XXp1              2         Terminated(92)
<   93     2  XXp1              2         Terminated(93)
<   94     2  XXp1              2         Terminated(94)
<   95     2  XXp1              2         Terminated(95)
<   96     2  XXp1              2         Terminated(96)
<   97     2  XXp1              2         Terminated(97)
<   98     2  XXp1              2         Terminated(98)
<   99     2  XXp1              2         Terminated(99)
< **************** end dumpProcesses() *******************
< 
< testcase_main(): after join of child 132, status = 132
< testcase_main(): after join of child 131, status = 131
< testcase_main(): after join of child 130, status = 130
< testcase_main(): after join of child 129, status = 129
< testcase_main(): after join of child 128, status = 128
< testcase_main(): after join of child 127, status = 127
< testcase_main(): after join of child 126, status = 126
< testcase_main(): after join of child 125, status = 125
< testcase_main(): after join of child 124, status = 124
< testcase_main(): after join of child 123, status = 123
< testcase_main(): after join of child 122, status = 122
< testcase_main(): after join of child 121, status = 121
< testcase_main(): after join of child 120, status = 120
< testcase_main(): after join of child 119, status = 119
< testcase_main(): after join of child 118, status = 118
< testcase_main(): after join of child 117, status = 117
< testcase_main(): after join of child 116, status = 116
< testcase_main(): after join of child 115, status = 115
< testcase_main(): after join of child 114, status = 114
< testcase_main(): after join of child 113, status = 113
< testcase_main(): after join of child 112, status = 112
< testcase_main(): after join of child 111, status = 111
< testcase_main(): after join of child 110, status = 110
< testcase_main(): after join of child 109, status = 109
< testcase_main(): after join of child 108, status = 108
< testcase_main(): after join of child 107, status = 107
< testcase_main(): after join of child 106, status = 106
< testcase_main(): after join of child 105, status = 105
< testcase_main(): after join of child 104, status = 104
< testcase_main(): after join of child 103, status = 103
< testcase_main(): after join of child 100, status = 100
< testcase_main(): after join of child 99, status = 99
< testcase_main(): after join of child 98, status = 98
< testcase_main(): after join of child 97, status = 97
< testcase_main(): after join of child 96, status = 96
< testcase_main(): after join of child 95, status = 95
< testcase_main(): after join of child 94, status = 94
< testcase_main(): after join of child 93, status = 93
< testcase_main(): after join of child 92, status = 92
< testcase_main(): after join of child 91, status = 91
< testcase_main(): after join of child 90, status = 90
< testcase_main(): after join of child 89, status = 89
< Phase 1A TEMPORARY HACK: testcase_main() returned, simulation will now halt.
< finish(): The simulation is now terminating.

TESTCASE test05
make: 'test05' is up to date.
1,20d0
< Phase 1A TEMPORARY HACK: init() manually switching to PID 1.
< phase2_start_service_processes() called -- currently a NOP
< phase3_start_service_processes() called -- currently a NOP
< phase4_start_service_processes() called -- currently a NOP
< phase5_start_service_processes() called -- currently a NOP
< Phase 1A TEMPORARY HACK: init() manually switching to testcase_main() after using spork() to create it.
< testcase_main(): started
< EXPECTATION: Create XXp1, which will create its own child, XXp2.  Each parent will join() with its child.  And the children will always be higher priority than the parent (in this testcase).
< Phase 1A TEMPORARY HACK: Manually switching to XXp1()
< XXp1(): started
< XXp1(): arg = 'XXp1'
< Phase 1A TEMPORARY HACK: Manually switching to XXp2()
< XXp2(): started
< XXp2(): arg = 'XXp2'
< XXp1(): after spork of child 4
< XXp1(): exit status for child 4 is 5
< testcase_main(): after spork of child 3
< testcase_main(): exit status for child 3 is 3
< Phase 1A TEMPORARY HACK: testcase_main() returned, simulation will now halt.
< finish(): The simulation is now terminating.

TESTCASE test06
make: 'test06' is up to date.
1,33d0
< Phase 1A TEMPORARY HACK: init() manually switching to PID 1.
< phase2_start_service_processes() called -- currently a NOP
< phase3_start_service_processes() called -- currently a NOP
< phase4_start_service_processes() called -- currently a NOP
< phase5_start_service_processes() called -- currently a NOP
< Phase 1A TEMPORARY HACK: init() manually switching to testcase_main() after using spork() to create it.
< testcase_main(): started
< EXPECTATION: Create XXp1 (moderate priority); that creates 2 XXp2 children (low priority).  XXp1 will block on join(), which will cause main() to wake up and report the spork() results - after which the XXp2 processes will run.
< Phase 1A TEMPORARY HACK: Manually switching to XXp1()
< XXp1(): started
< XXp1(): arg = 'XXp1'
< XXp1(): executing spork of first child
< XXp1(): spork of first child returned pid = 4
< XXp1(): executing spork of second child
< XXp1(): spork of second child returned pid = 5
< XXp1(): performing first join
< Phase 1A TEMPORARY HACK: Manually switching to testcase_main(), since XXp1 has created its two children, which are lower priority than 
< testcase_main(): after spork of child 3 -- you should not see this until after XXp1() has created both of its children, and started its first join().  However, you should see it *before* either of the children run.
< testcase_main(): performing join
< Phase 1A TEMPORARY HACK: Manually switching to the first XXp2()
< XXp2(): started -- you should not see this until both XXp1() and testcase_main() are blocked in join().
< XXp2(): arg = 'XXp2'
< XXp2(): This process will terminate immediately.
< XXp1(): first join returned kidpid = 4, status = 5 -- you should see this after the first child terminates, and before the second child even starts.
< XXp1(): performing second join
< Phase 1A TEMPORARY HACK: Manually switching to the second XXp2()
< XXp2(): started -- you should not see this until both XXp1() and testcase_main() are blocked in join().
< XXp2(): arg = 'XXp2'
< XXp2(): This process will terminate immediately.
< XXp1(): second join returned kidpid = 5, status = 5
< testcase_main(): exit status for child 3 is 3
< Phase 1A TEMPORARY HACK: testcase_main() returned, simulation will now halt.
< finish(): The simulation is now terminating.

TESTCASE test07
make: 'test07' is up to date.
1,22d0
< Phase 1A TEMPORARY HACK: init() manually switching to PID 1.
< phase2_start_service_processes() called -- currently a NOP
< phase3_start_service_processes() called -- currently a NOP
< phase4_start_service_processes() called -- currently a NOP
< phase5_start_service_processes() called -- currently a NOP
< Phase 1A TEMPORARY HACK: init() manually switching to testcase_main() after using spork() to create it.
< testcase_main(): started
< EXPECTATION: main() creates XXp1.  XXp1 creates XXp2, and then immediately returns before calling join(); the Phase 1 code should thus call quit() on that process.  Although XXp2 is higher priority than XXp1 (meaning that it ran to completion before this code ran), the code should complain because you quit() a process before calling join() on all of your children.
< Phase 1A TEMPORARY HACK: Manually switching to XXp1()
< Phase 1A TEMPORARY HACK: Manually switching to XXp2()
< XXp2(): started
< XXp2(): arg = 'XXp2'
< XXp2(): terminating!
< XXp1(): spork() rc=4
<  PID  PPID  NAME              PRIORITY  STATE
<    1     0  init              6         Runnable
<    2     1  testcase_main     3         Runnable
<    3     2  XXp1              2         Running
<    4     3  XXp2              1         Terminated(3)
< XXp1(): This process will terminate.  This should cause an error check in quit() to fire, report an error, and kill the simulation.
< ERROR: Process pid 3 called quit() while it still had children.
< finish(): The simulation is now terminating.

TESTCASE test08
make: 'test08' is up to date.
1,10d0
< Phase 1A TEMPORARY HACK: init() manually switching to PID 1.
< phase2_start_service_processes() called -- currently a NOP
< phase3_start_service_processes() called -- currently a NOP
< phase4_start_service_processes() called -- currently a NOP
< phase5_start_service_processes() called -- currently a NOP
< Phase 1A TEMPORARY HACK: init() manually switching to testcase_main() after using spork() to create it.
< testcase_main(): started
< EXPECTATION: The simulation should be terminated as soon as spork() is called, since we are not in kernel mode.
< ERROR: Someone attempted to call spork while in user mode!
< finish(): The simulation is now terminating.

TESTCASE test09
make: 'test09' is up to date.
1,13d0
< Phase 1A TEMPORARY HACK: init() manually switching to PID 1.
< phase2_start_service_processes() called -- currently a NOP
< phase3_start_service_processes() called -- currently a NOP
< phase4_start_service_processes() called -- currently a NOP
< phase5_start_service_processes() called -- currently a NOP
< Phase 1A TEMPORARY HACK: init() manually switching to testcase_main() after using spork() to create it.
< testcase_main(): started
< EXPECTATION: The simulation should be terminated as soon as quit() is called, since we are not in kernel mode.
< Phase 1A TEMPORARY HACK: Manually switching to XXp1()
< XXp1(): started
< XXp1(): arg = 'XXp1'
< ERROR: Someone attempted to call quit_phase_1a while in user mode!
< finish(): The simulation is now terminating.

TESTCASE test17
make: 'test17' is up to date.
1,26d0
< Phase 1A TEMPORARY HACK: init() manually switching to PID 1.
< phase2_start_service_processes() called -- currently a NOP
< phase3_start_service_processes() called -- currently a NOP
< phase4_start_service_processes() called -- currently a NOP
< phase5_start_service_processes() called -- currently a NOP
< Phase 1A TEMPORARY HACK: init() manually switching to testcase_main() after using spork() to create it.
< testcase_main(): started
< EXPECTATION: testcase_main() will create 3 children, all running XXp1().  They have priority 5, so that they will not interrupt testcase_main().  The PID of each child is stored into a global array.  Then testcase_main() blocks in join() (three times).  The child processes should run in the same order they were created (we use a FIFO for ordering dispatch), and so each can call getpid() to confirm that it has the same value as stored in the global array.
< testcase_main(): pidlist[] = [3,4,5, ...]
< Phase 1A TEMPORARY HACK: Manually switching to the first XXp1()
< One of the XXp1() process has started, getpid()=3
< This process's getpid() matched what spork() returned.
< This XXp1() process will now terminate.
< Phase 1A TEMPORARY HACK: Manually switching to the second XXp1()
< One of the XXp1() process has started, getpid()=4
< This process's getpid() matched what spork() returned.
< This XXp1() process will now terminate.
< Phase 1A TEMPORARY HACK: Manually switching to the second XXp1()
< One of the XXp1() process has started, getpid()=5
< This process's getpid() matched what spork() returned.
< This XXp1() process will now terminate.
< testcase_main: joined with child 5
< testcase_main: joined with child 4
< testcase_main: joined with child 3
< Phase 1A TEMPORARY HACK: testcase_main() returned, simulation will now halt.
< finish(): The simulation is now terminating.

TESTCASE test19
make: 'test19' is up to date.
1,19d0
< Phase 1A TEMPORARY HACK: init() manually switching to PID 1.
< phase2_start_service_processes() called -- currently a NOP
< phase3_start_service_processes() called -- currently a NOP
< phase4_start_service_processes() called -- currently a NOP
< phase5_start_service_processes() called -- currently a NOP
< Phase 1A TEMPORARY HACK: init() manually switching to testcase_main() after using spork() to create it.
< testcase_main(): started
< EXPECTATION: testcase_main() creates a child XXp2().  That process will try (many times) to create a child XXp1() with a too-small stack space.  Each call should fail.
< spork creating a child -- it will run next
< Phase 1A TEMPORARY HACK: Manually switching to XXp2()
< -2 returned, which is correct!
< -2 returned, which is correct!
< -2 returned, which is correct!
< -2 returned, which is correct!
< testcase_main(): created XXp2 with pid = 3
< testcase_main(): calling join
< testcase_main(): join returned pid = 3, status = 0
< Phase 1A TEMPORARY HACK: testcase_main() returned, simulation will now halt.
< finish(): The simulation is now terminating.

TESTCASE test20
make: 'test20' is up to date.
1,122d0
< Phase 1A TEMPORARY HACK: init() manually switching to PID 1.
< phase2_start_service_processes() called -- currently a NOP
< phase3_start_service_processes() called -- currently a NOP
< phase4_start_service_processes() called -- currently a NOP
< phase5_start_service_processes() called -- currently a NOP
< Phase 1A TEMPORARY HACK: init() manually switching to testcase_main() after using spork() to create it.
< testcase_main(): started
< EXPECTATION: Attempt to create MAXPROC+2 processes (without calling join() on any of them).  This will work many times but eventually fail because all of the procTable slots are full.  We will only print out info about the failed ones.
< testcase_main(): start 52 processes
< Phase 1A TEMPORARY HACK: Manually switching to the recently created XXp1()
< Phase 1A TEMPORARY HACK: Manually switching to the recently created XXp1()
< Phase 1A TEMPORARY HACK: Manually switching to the recently created XXp1()
< Phase 1A TEMPORARY HACK: Manually switching to the recently created XXp1()
< Phase 1A TEMPORARY HACK: Manually switching to the recently created XXp1()
< Phase 1A TEMPORARY HACK: Manually switching to the recently created XXp1()
< Phase 1A TEMPORARY HACK: Manually switching to the recently created XXp1()
< Phase 1A TEMPORARY HACK: Manually switching to the recently created XXp1()
< Phase 1A TEMPORARY HACK: Manually switching to the recently created XXp1()
< Phase 1A TEMPORARY HACK: Manually switching to the recently created XXp1()
< Phase 1A TEMPORARY HACK: Manually switching to the recently created XXp1()
< Phase 1A TEMPORARY HACK: Manually switching to the recently created XXp1()
< Phase 1A TEMPORARY HACK: Manually switching to the recently created XXp1()
< Phase 1A TEMPORARY HACK: Manually switching to the recently created XXp1()
< Phase 1A TEMPORARY HACK: Manually switching to the recently created XXp1()
< Phase 1A TEMPORARY HACK: Manually switching to the recently created XXp1()
< Phase 1A TEMPORARY HACK: Manually switching to the recently created XXp1()
< Phase 1A TEMPORARY HACK: Manually switching to the recently created XXp1()
< Phase 1A TEMPORARY HACK: Manually switching to the recently created XXp1()
< Phase 1A TEMPORARY HACK: Manually switching to the recently created XXp1()
< Phase 1A TEMPORARY HACK: Manually switching to the recently created XXp1()
< Phase 1A TEMPORARY HACK: Manually switching to the recently created XXp1()
< Phase 1A TEMPORARY HACK: Manually switching to the recently created XXp1()
< Phase 1A TEMPORARY HACK: Manually switching to the recently created XXp1()
< Phase 1A TEMPORARY HACK: Manually switching to the recently created XXp1()
< Phase 1A TEMPORARY HACK: Manually switching to the recently created XXp1()
< Phase 1A TEMPORARY HACK: Manually switching to the recently created XXp1()
< Phase 1A TEMPORARY HACK: Manually switching to the recently created XXp1()
< Phase 1A TEMPORARY HACK: Manually switching to the recently created XXp1()
< Phase 1A TEMPORARY HACK: Manually switching to the recently created XXp1()
< Phase 1A TEMPORARY HACK: Manually switching to the recently created XXp1()
< Phase 1A TEMPORARY HACK: Manually switching to the recently created XXp1()
< Phase 1A TEMPORARY HACK: Manually switching to the recently created XXp1()
< Phase 1A TEMPORARY HACK: Manually switching to the recently created XXp1()
< Phase 1A TEMPORARY HACK: Manually switching to the recently created XXp1()
< Phase 1A TEMPORARY HACK: Manually switching to the recently created XXp1()
< Phase 1A TEMPORARY HACK: Manually switching to the recently created XXp1()
< Phase 1A TEMPORARY HACK: Manually switching to the recently created XXp1()
< Phase 1A TEMPORARY HACK: Manually switching to the recently created XXp1()
< Phase 1A TEMPORARY HACK: Manually switching to the recently created XXp1()
< Phase 1A TEMPORARY HACK: Manually switching to the recently created XXp1()
< Phase 1A TEMPORARY HACK: Manually switching to the recently created XXp1()
< Phase 1A TEMPORARY HACK: Manually switching to the recently created XXp1()
< Phase 1A TEMPORARY HACK: Manually switching to the recently created XXp1()
< Phase 1A TEMPORARY HACK: Manually switching to the recently created XXp1()
< Phase 1A TEMPORARY HACK: Manually switching to the recently created XXp1()
< Phase 1A TEMPORARY HACK: Manually switching to the recently created XXp1()
< Phase 1A TEMPORARY HACK: Manually switching to the recently created XXp1()
< testcase_main(): spork() failed: i=48, pid is -1.
< testcase_main(): spork() failed: i=49, pid is -1.
< testcase_main(): spork() failed: i=50, pid is -1.
< testcase_main(): spork() failed: i=51, pid is -1.
<  PID  PPID  NAME              PRIORITY  STATE
<   50     2  XXp1              2         Terminated(2)
<    1     0  init              6         Runnable
<    2     1  testcase_main     3         Running
<    3     2  XXp1              2         Terminated(2)
<    4     2  XXp1              2         Terminated(2)
<    5     2  XXp1              2         Terminated(2)
<    6     2  XXp1              2         Terminated(2)
<    7     2  XXp1              2         Terminated(2)
<    8     2  XXp1              2         Terminated(2)
<    9     2  XXp1              2         Terminated(2)
<   10     2  XXp1              2         Terminated(2)
<   11     2  XXp1              2         Terminated(2)
<   12     2  XXp1              2         Terminated(2)
<   13     2  XXp1              2         Terminated(2)
<   14     2  XXp1              2         Terminated(2)
<   15     2  XXp1              2         Terminated(2)
<   16     2  XXp1              2         Terminated(2)
<   17     2  XXp1              2         Terminated(2)
<   18     2  XXp1              2         Terminated(2)
<   19     2  XXp1              2         Terminated(2)
<   20     2  XXp1              2         Terminated(2)
<   21     2  XXp1              2         Terminated(2)
<   22     2  XXp1              2         Terminated(2)
<   23     2  XXp1              2         Terminated(2)
<   24     2  XXp1              2         Terminated(2)
<   25     2  XXp1              2         Terminated(2)
<   26     2  XXp1              2         Terminated(2)
<   27     2  XXp1              2         Terminated(2)
<   28     2  XXp1              2         Terminated(2)
<   29     2  XXp1              2         Terminated(2)
<   30     2  XXp1              2         Terminated(2)
<   31     2  XXp1              2         Terminated(2)
<   32     2  XXp1              2         Terminated(2)
<   33     2  XXp1              2         Terminated(2)
<   34     2  XXp1              2         Terminated(2)
<   35     2  XXp1              2         Terminated(2)
<   36     2  XXp1              2         Terminated(2)
<   37     2  XXp1              2         Terminated(2)
<   38     2  XXp1              2         Terminated(2)
<   39     2  XXp1              2         Terminated(2)
<   40     2  XXp1              2         Terminated(2)
<   41     2  XXp1              2         Terminated(2)
<   42     2  XXp1              2         Terminated(2)
<   43     2  XXp1              2         Terminated(2)
<   44     2  XXp1              2         Terminated(2)
<   45     2  XXp1              2         Terminated(2)
<   46     2  XXp1              2         Terminated(2)
<   47     2  XXp1              2         Terminated(2)
<   48     2  XXp1              2         Terminated(2)
<   49     2  XXp1              2         Terminated(2)
< testcase_main(): Calling join() on 52 processes.  The number of 'failed' calls here should be the same as the number of 'failed' spork() calls.
< testcase_main(): join() failed: i=48, pid is -2.
< testcase_main(): join() failed: i=49, pid is -2.
< testcase_main(): join() failed: i=50, pid is -2.
< testcase_main(): join() failed: i=51, pid is -2.
<  PID  PPID  NAME              PRIORITY  STATE
<    1     0  init              6         Runnable
<    2     1  testcase_main     3         Running
< Phase 1A TEMPORARY HACK: testcase_main() returned, simulation will now halt.
< finish(): The simulation is now terminating.

TESTCASE test22
make: 'test22' is up to date.
1,12d0
< Phase 1A TEMPORARY HACK: init() manually switching to PID 1.
< phase2_start_service_processes() called -- currently a NOP
< phase3_start_service_processes() called -- currently a NOP
< phase4_start_service_processes() called -- currently a NOP
< phase5_start_service_processes() called -- currently a NOP
< Phase 1A TEMPORARY HACK: init() manually switching to testcase_main() after using spork() to create it.
< testcase_main(): started
< QUICK SUMMARY: Attempt to spork() with invalid priorities.
< testcase_main(): could not spork a child--invalid priority
< testcase_main(): could not spork a child--invalid priority
< Phase 1A TEMPORARY HACK: testcase_main() returned, simulation will now halt.
< finish(): The simulation is now terminating.

TESTCASE test26
make: 'test26' is up to date.
1,26d0
< Phase 1A TEMPORARY HACK: init() manually switching to PID 1.
< phase2_start_service_processes() called -- currently a NOP
< phase3_start_service_processes() called -- currently a NOP
< phase4_start_service_processes() called -- currently a NOP
< phase5_start_service_processes() called -- currently a NOP
< Phase 1A TEMPORARY HACK: init() manually switching to testcase_main() after using spork() to create it.
< testcase_main(): started
< QUICK SUMMARY: Checking to see what happens when you call join() with no children at all.
< Phase 1A TEMPORARY HACK: Manually switching to the recently created XXp1()
< XXp1(): started
< XXp1(): arg = 'XXp1'
< XXp1(): performing join with no children
< XXp1(): value returned by join is -2 expected value was -2
< testcase_main(): after spork of child 3
< Phase 1A TEMPORARY HACK: Manually switching to the recently created XXp1()
< XXp2(): started
< XXp2(): arg = 'XXp2'
< testcase_main(): after spork of child 4
< testcase_main(): performing first join
< testcase_main(): exit status for child 4 is 2
< testcase_main(): performing second join
< testcase_main(): exit status for child 3 is 1
< testcase_main(): performing third join, have no unjoined children
< testcase_main(): value returned by join is -2 expected value was -2
< Phase 1A TEMPORARY HACK: testcase_main() returned, simulation will now halt.
< finish(): The simulation is now terminating.

